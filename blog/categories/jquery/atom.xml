<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | yupyom log]]></title>
  <link href="http://yupyom.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://yupyom.github.io/"/>
  <updated>2014-07-13T23:38:18+09:00</updated>
  <id>http://yupyom.github.io/</id>
  <author>
    <name><![CDATA[yupyom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQueryのページ読み込み]]></title>
    <link href="http://yupyom.github.io/blog/2014/07/13/jquery-load-event/"/>
    <updated>2014-07-13T19:33:45+09:00</updated>
    <id>http://yupyom.github.io/blog/2014/07/13/jquery-load-event</id>
    <content type="html"><![CDATA[<p>jQueryでは、ページ読み込みの処理方法が大きく2つある。.ready()と.on()について整理しておく。</p>

<!-- more -->

<h2 id="ready">.ready()</h2>

<p><code>load</code>イベントの発生は、画像を含め、ページに関連するリソースがすべて読み込まれた時点となる。JavaScriptを使ってHTML要素にアクセスしたり、CSS属性を変更する場合、大半のケースでここまで待つ必要はなく、DOMの準備ができた段階で良い。jQueryの<code>.ready()</code>メソッドはこういう場合に便利。</p>

<p><code>js .ready()の基本構文の形式
$( document ).ready( handler )
</code></p>

<p>ハンドラは無名関数で実装される場合が多いので、次のような構文となる。</p>

<p><code>js .ready()の基本構文（無名関数による実装）
$( document ).ready(function() {
  //ハンドラの中身を書く
});
</code></p>

<p>また、短縮構文として</p>

<p><code>js .ready()の短縮構文の形式
$( handler )
</code></p>

<p>が用意されている。よって、</p>

<p><code>js .ready()の短縮構文（無名関数による実装）
$(function() {
  // ハンドラを記述
});
</code></p>

<p>がよく使われる。</p>

<h3 id="section">参考）他のフレームワークと併用する場合</h3>

<p><a href="http://prototypejs.org/">Prototype</a>など、他のフレームワークと併用する場合、名前空間の衝突を避けるために<code>$.noConflict() </code>を宣言することがある。この場合でも、コードの使い回しをする都合、.ready()の中だけは<code>$</code>が使えると便利だ。その場合は、</p>

<p><code>js .ready()の別の使い方
jQuery( document ).ready(function( $ ) {
  // ハンドラの中に限り、 $ は jQueryオブジェクトを指す
});
</code></p>

<h2 id="on">.on()</h2>

<p>要素に対してイベントハンドラを付け加えるためのメソッド。jQuery 1.7が登場するまでは、<code>.bind()</code>や<code>.live()</code>、<code>.delegate()</code>が使い分けられていた。以下は典型例のみだが、それぞれに適した用途があって煩雑だった。それらが、ようやく<code>.on()</code>にすべて統合され、シンプルになった。</p>

<p><code>js .on()、.bind()、.delegate()の比較（典型例）
// 1) .bind() -- jQuery 1.0以降
// 単一のイベントに対するハンドラを指定できる
$( elem ).bind( eventType, handler );
// 2) .live() -- jQuery 1.3以降（1.7で非推奨、1.9で削除）
// 1.4以降で、スペース区切りで複数のイベントを指定可能に
$( elem ).live( events, handler )
// 3) .delegate() -- jQuery 1.4.2以降
// 親要素にイベントを割り当て、後で追加された子要素にもハンドラが
// 実行されるようにできる
$( elem ).delegate( selector, eventType, handler );
// 4) .on() -- jQuery 1.7以降
$( elem ).on( events[, selector], handler );
</code></p>

<p><code>.on()</code>を使って、<code>load</code>イベントのトリガーを設けるには、以下のようにする。古くからは、<code>.load()</code>というメソッドもあるが、1.8で非推奨となった。</p>

<p><code>js .on()による読み込み制御
$( window ).on( "load", function() {
  // 画像もすべて読み込まれた後で実行される
});
</code></p>

<h2 id="section-1">実験</h2>

<p>.ready()と.on()について<a href="/example-0003/">実験してみる</a>。</p>

<p><code>js どちらが先に実行される？
$( window ).on( "load", function() {
  $("#message").append("&lt;li&gt;1つ目の&lt;code&gt;$( window ).on( 'load', handler )&lt;/code&gt;が呼び出されました。&lt;/li&gt;");
});
$(function(){
  $("#message").append("&lt;li&gt;1つ目の&lt;code&gt;$( handler )&lt;/code&gt;が呼び出されました。&lt;/li&gt;")
});
$( window ).on( "load", function() {
  $("#message").append("&lt;li&gt;2つ目の&lt;code&gt;$( window ).on( 'load', handler )&lt;/code&gt;が呼び出されました。&lt;/li&gt;");
});
$(function(){
  $("#message").append("&lt;li&gt;2つ目の&lt;code&gt;$( handler )&lt;/code&gt;が呼び出されました。&lt;/li&gt;")
});
</code></p>
]]></content>
  </entry>
  
</feed>
